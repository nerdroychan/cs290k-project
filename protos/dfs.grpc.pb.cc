// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dfs.proto

#include "dfs.pb.h"
#include "dfs.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dfs {

static const char* DFS_method_names[] = {
  "/dfs.DFS/get_dir",
  "/dfs.DFS/change_dir",
  "/dfs.DFS/file_count",
  "/dfs.DFS/open_list",
  "/dfs.DFS/next_list",
  "/dfs.DFS/close_list",
  "/dfs.DFS/open_file_to_write",
  "/dfs.DFS/next_write",
  "/dfs.DFS/open_file_to_read",
  "/dfs.DFS/next_read",
  "/dfs.DFS/random_read",
  "/dfs.DFS/close_file",
};

std::unique_ptr< DFS::Stub> DFS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DFS::Stub> stub(new DFS::Stub(channel));
  return stub;
}

DFS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_get_dir_(DFS_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_change_dir_(DFS_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_file_count_(DFS_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_open_list_(DFS_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_next_list_(DFS_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_close_list_(DFS_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_open_file_to_write_(DFS_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_next_write_(DFS_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_open_file_to_read_(DFS_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_next_read_(DFS_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_random_read_(DFS_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_close_file_(DFS_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DFS::Stub::get_dir(::grpc::ClientContext* context, const ::dfs::Void& request, ::dfs::Str* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_dir_, context, request, response);
}

void DFS::Stub::experimental_async::get_dir(::grpc::ClientContext* context, const ::dfs::Void* request, ::dfs::Str* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_dir_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::get_dir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Str* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_dir_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::get_dir(::grpc::ClientContext* context, const ::dfs::Void* request, ::dfs::Str* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_get_dir_, context, request, response, reactor);
}

void DFS::Stub::experimental_async::get_dir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Str* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_get_dir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::Str>* DFS::Stub::Asyncget_dirRaw(::grpc::ClientContext* context, const ::dfs::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Str>::Create(channel_.get(), cq, rpcmethod_get_dir_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs::Str>* DFS::Stub::PrepareAsyncget_dirRaw(::grpc::ClientContext* context, const ::dfs::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Str>::Create(channel_.get(), cq, rpcmethod_get_dir_, context, request, false);
}

::grpc::Status DFS::Stub::change_dir(::grpc::ClientContext* context, const ::dfs::Str& request, ::dfs::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_change_dir_, context, request, response);
}

void DFS::Stub::experimental_async::change_dir(::grpc::ClientContext* context, const ::dfs::Str* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_change_dir_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::change_dir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_change_dir_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::change_dir(::grpc::ClientContext* context, const ::dfs::Str* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_change_dir_, context, request, response, reactor);
}

void DFS::Stub::experimental_async::change_dir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_change_dir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::Asyncchange_dirRaw(::grpc::ClientContext* context, const ::dfs::Str& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_change_dir_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::PrepareAsyncchange_dirRaw(::grpc::ClientContext* context, const ::dfs::Str& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_change_dir_, context, request, false);
}

::grpc::Status DFS::Stub::file_count(::grpc::ClientContext* context, const ::dfs::Void& request, ::dfs::Int* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_file_count_, context, request, response);
}

void DFS::Stub::experimental_async::file_count(::grpc::ClientContext* context, const ::dfs::Void* request, ::dfs::Int* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_file_count_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::file_count(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Int* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_file_count_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::file_count(::grpc::ClientContext* context, const ::dfs::Void* request, ::dfs::Int* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_file_count_, context, request, response, reactor);
}

void DFS::Stub::experimental_async::file_count(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Int* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_file_count_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::Int>* DFS::Stub::Asyncfile_countRaw(::grpc::ClientContext* context, const ::dfs::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Int>::Create(channel_.get(), cq, rpcmethod_file_count_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs::Int>* DFS::Stub::PrepareAsyncfile_countRaw(::grpc::ClientContext* context, const ::dfs::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Int>::Create(channel_.get(), cq, rpcmethod_file_count_, context, request, false);
}

::grpc::Status DFS::Stub::open_list(::grpc::ClientContext* context, const ::dfs::Str& request, ::dfs::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_open_list_, context, request, response);
}

void DFS::Stub::experimental_async::open_list(::grpc::ClientContext* context, const ::dfs::Str* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_open_list_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::open_list(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_open_list_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::open_list(::grpc::ClientContext* context, const ::dfs::Str* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_open_list_, context, request, response, reactor);
}

void DFS::Stub::experimental_async::open_list(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_open_list_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::Asyncopen_listRaw(::grpc::ClientContext* context, const ::dfs::Str& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_open_list_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::PrepareAsyncopen_listRaw(::grpc::ClientContext* context, const ::dfs::Str& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_open_list_, context, request, false);
}

::grpc::Status DFS::Stub::next_list(::grpc::ClientContext* context, const ::dfs::Void& request, ::dfs::Dentry* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_next_list_, context, request, response);
}

void DFS::Stub::experimental_async::next_list(::grpc::ClientContext* context, const ::dfs::Void* request, ::dfs::Dentry* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_next_list_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::next_list(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Dentry* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_next_list_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::next_list(::grpc::ClientContext* context, const ::dfs::Void* request, ::dfs::Dentry* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_next_list_, context, request, response, reactor);
}

void DFS::Stub::experimental_async::next_list(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Dentry* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_next_list_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::Dentry>* DFS::Stub::Asyncnext_listRaw(::grpc::ClientContext* context, const ::dfs::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Dentry>::Create(channel_.get(), cq, rpcmethod_next_list_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs::Dentry>* DFS::Stub::PrepareAsyncnext_listRaw(::grpc::ClientContext* context, const ::dfs::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Dentry>::Create(channel_.get(), cq, rpcmethod_next_list_, context, request, false);
}

::grpc::Status DFS::Stub::close_list(::grpc::ClientContext* context, const ::dfs::Void& request, ::dfs::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_close_list_, context, request, response);
}

void DFS::Stub::experimental_async::close_list(::grpc::ClientContext* context, const ::dfs::Void* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_close_list_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::close_list(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_close_list_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::close_list(::grpc::ClientContext* context, const ::dfs::Void* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_close_list_, context, request, response, reactor);
}

void DFS::Stub::experimental_async::close_list(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_close_list_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::Asyncclose_listRaw(::grpc::ClientContext* context, const ::dfs::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_close_list_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::PrepareAsyncclose_listRaw(::grpc::ClientContext* context, const ::dfs::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_close_list_, context, request, false);
}

::grpc::Status DFS::Stub::open_file_to_write(::grpc::ClientContext* context, const ::dfs::Str& request, ::dfs::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_open_file_to_write_, context, request, response);
}

void DFS::Stub::experimental_async::open_file_to_write(::grpc::ClientContext* context, const ::dfs::Str* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_open_file_to_write_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::open_file_to_write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_open_file_to_write_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::open_file_to_write(::grpc::ClientContext* context, const ::dfs::Str* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_open_file_to_write_, context, request, response, reactor);
}

void DFS::Stub::experimental_async::open_file_to_write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_open_file_to_write_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::Asyncopen_file_to_writeRaw(::grpc::ClientContext* context, const ::dfs::Str& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_open_file_to_write_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::PrepareAsyncopen_file_to_writeRaw(::grpc::ClientContext* context, const ::dfs::Str& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_open_file_to_write_, context, request, false);
}

::grpc::Status DFS::Stub::next_write(::grpc::ClientContext* context, const ::dfs::WriteRequest& request, ::dfs::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_next_write_, context, request, response);
}

void DFS::Stub::experimental_async::next_write(::grpc::ClientContext* context, const ::dfs::WriteRequest* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_next_write_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::next_write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_next_write_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::next_write(::grpc::ClientContext* context, const ::dfs::WriteRequest* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_next_write_, context, request, response, reactor);
}

void DFS::Stub::experimental_async::next_write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_next_write_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::Asyncnext_writeRaw(::grpc::ClientContext* context, const ::dfs::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_next_write_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::PrepareAsyncnext_writeRaw(::grpc::ClientContext* context, const ::dfs::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_next_write_, context, request, false);
}

::grpc::Status DFS::Stub::open_file_to_read(::grpc::ClientContext* context, const ::dfs::Str& request, ::dfs::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_open_file_to_read_, context, request, response);
}

void DFS::Stub::experimental_async::open_file_to_read(::grpc::ClientContext* context, const ::dfs::Str* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_open_file_to_read_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::open_file_to_read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_open_file_to_read_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::open_file_to_read(::grpc::ClientContext* context, const ::dfs::Str* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_open_file_to_read_, context, request, response, reactor);
}

void DFS::Stub::experimental_async::open_file_to_read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_open_file_to_read_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::Asyncopen_file_to_readRaw(::grpc::ClientContext* context, const ::dfs::Str& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_open_file_to_read_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::PrepareAsyncopen_file_to_readRaw(::grpc::ClientContext* context, const ::dfs::Str& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_open_file_to_read_, context, request, false);
}

::grpc::Status DFS::Stub::next_read(::grpc::ClientContext* context, const ::dfs::Void& request, ::dfs::ReadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_next_read_, context, request, response);
}

void DFS::Stub::experimental_async::next_read(::grpc::ClientContext* context, const ::dfs::Void* request, ::dfs::ReadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_next_read_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::next_read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::ReadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_next_read_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::next_read(::grpc::ClientContext* context, const ::dfs::Void* request, ::dfs::ReadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_next_read_, context, request, response, reactor);
}

void DFS::Stub::experimental_async::next_read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::ReadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_next_read_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::ReadResponse>* DFS::Stub::Asyncnext_readRaw(::grpc::ClientContext* context, const ::dfs::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::ReadResponse>::Create(channel_.get(), cq, rpcmethod_next_read_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs::ReadResponse>* DFS::Stub::PrepareAsyncnext_readRaw(::grpc::ClientContext* context, const ::dfs::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::ReadResponse>::Create(channel_.get(), cq, rpcmethod_next_read_, context, request, false);
}

::grpc::Status DFS::Stub::random_read(::grpc::ClientContext* context, const ::dfs::RandomReadRequest& request, ::dfs::ReadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_random_read_, context, request, response);
}

void DFS::Stub::experimental_async::random_read(::grpc::ClientContext* context, const ::dfs::RandomReadRequest* request, ::dfs::ReadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_random_read_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::random_read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::ReadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_random_read_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::random_read(::grpc::ClientContext* context, const ::dfs::RandomReadRequest* request, ::dfs::ReadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_random_read_, context, request, response, reactor);
}

void DFS::Stub::experimental_async::random_read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::ReadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_random_read_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::ReadResponse>* DFS::Stub::Asyncrandom_readRaw(::grpc::ClientContext* context, const ::dfs::RandomReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::ReadResponse>::Create(channel_.get(), cq, rpcmethod_random_read_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs::ReadResponse>* DFS::Stub::PrepareAsyncrandom_readRaw(::grpc::ClientContext* context, const ::dfs::RandomReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::ReadResponse>::Create(channel_.get(), cq, rpcmethod_random_read_, context, request, false);
}

::grpc::Status DFS::Stub::close_file(::grpc::ClientContext* context, const ::dfs::Void& request, ::dfs::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_close_file_, context, request, response);
}

void DFS::Stub::experimental_async::close_file(::grpc::ClientContext* context, const ::dfs::Void* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_close_file_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::close_file(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_close_file_, context, request, response, std::move(f));
}

void DFS::Stub::experimental_async::close_file(::grpc::ClientContext* context, const ::dfs::Void* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_close_file_, context, request, response, reactor);
}

void DFS::Stub::experimental_async::close_file(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_close_file_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::Asyncclose_fileRaw(::grpc::ClientContext* context, const ::dfs::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_close_file_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs::Bool>* DFS::Stub::PrepareAsyncclose_fileRaw(::grpc::ClientContext* context, const ::dfs::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs::Bool>::Create(channel_.get(), cq, rpcmethod_close_file_, context, request, false);
}

DFS::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFS_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFS::Service, ::dfs::Void, ::dfs::Str>(
          std::mem_fn(&DFS::Service::get_dir), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFS_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFS::Service, ::dfs::Str, ::dfs::Bool>(
          std::mem_fn(&DFS::Service::change_dir), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFS_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFS::Service, ::dfs::Void, ::dfs::Int>(
          std::mem_fn(&DFS::Service::file_count), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFS_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFS::Service, ::dfs::Str, ::dfs::Bool>(
          std::mem_fn(&DFS::Service::open_list), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFS_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFS::Service, ::dfs::Void, ::dfs::Dentry>(
          std::mem_fn(&DFS::Service::next_list), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFS_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFS::Service, ::dfs::Void, ::dfs::Bool>(
          std::mem_fn(&DFS::Service::close_list), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFS_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFS::Service, ::dfs::Str, ::dfs::Bool>(
          std::mem_fn(&DFS::Service::open_file_to_write), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFS_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFS::Service, ::dfs::WriteRequest, ::dfs::Bool>(
          std::mem_fn(&DFS::Service::next_write), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFS_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFS::Service, ::dfs::Str, ::dfs::Bool>(
          std::mem_fn(&DFS::Service::open_file_to_read), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFS_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFS::Service, ::dfs::Void, ::dfs::ReadResponse>(
          std::mem_fn(&DFS::Service::next_read), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFS_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFS::Service, ::dfs::RandomReadRequest, ::dfs::ReadResponse>(
          std::mem_fn(&DFS::Service::random_read), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFS_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFS::Service, ::dfs::Void, ::dfs::Bool>(
          std::mem_fn(&DFS::Service::close_file), this)));
}

DFS::Service::~Service() {
}

::grpc::Status DFS::Service::get_dir(::grpc::ServerContext* context, const ::dfs::Void* request, ::dfs::Str* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFS::Service::change_dir(::grpc::ServerContext* context, const ::dfs::Str* request, ::dfs::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFS::Service::file_count(::grpc::ServerContext* context, const ::dfs::Void* request, ::dfs::Int* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFS::Service::open_list(::grpc::ServerContext* context, const ::dfs::Str* request, ::dfs::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFS::Service::next_list(::grpc::ServerContext* context, const ::dfs::Void* request, ::dfs::Dentry* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFS::Service::close_list(::grpc::ServerContext* context, const ::dfs::Void* request, ::dfs::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFS::Service::open_file_to_write(::grpc::ServerContext* context, const ::dfs::Str* request, ::dfs::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFS::Service::next_write(::grpc::ServerContext* context, const ::dfs::WriteRequest* request, ::dfs::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFS::Service::open_file_to_read(::grpc::ServerContext* context, const ::dfs::Str* request, ::dfs::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFS::Service::next_read(::grpc::ServerContext* context, const ::dfs::Void* request, ::dfs::ReadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFS::Service::random_read(::grpc::ServerContext* context, const ::dfs::RandomReadRequest* request, ::dfs::ReadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFS::Service::close_file(::grpc::ServerContext* context, const ::dfs::Void* request, ::dfs::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dfs

